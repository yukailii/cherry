{"version":3,"sources":["components/pictureSelect.js","App.js","serviceWorker.js","index.js"],"names":["PictureSelect","onChangevalue","id","props","value","onChange","isChecked","_","includes","newValue","cloneDeep","splice","indexOf","selectAll","isSelectAll","pictures","map","ids","xor","length","this","className","type","checked","target","item","key","src","url","name","Component","defaultProps","App","React","useState","setValue","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVAKMA,E,2MAEJC,cAAgB,SAACC,GAAQ,IAAD,EACM,EAAKC,MAAzBC,EADc,EACdA,MAAOC,EADO,EACPA,SACTC,EAAYC,IAAEC,SAASJ,EAAOF,GAC9BO,EAAWF,IAAEG,UAAUN,GAC1BE,GACDG,EAASE,OAAOF,EAASG,QAAQV,GAAK,GACtCG,EAASI,IAETJ,EAAS,GAAD,mBAAKI,GAAL,CAAeP,M,EAI3BW,UAAY,SAACC,GAAiB,IAAD,EACI,EAAKX,MAA5BE,EADmB,EACnBA,SAAUU,EADS,EACTA,SAClBV,EAASS,EAAcC,EAASC,IAAI,qBAAGd,KAAe,K,EAGxDY,YAAc,WAAO,IAAD,EACU,EAAKX,MAAzBY,EADU,EACVA,SAAUX,EADA,EACAA,MACZa,EAAMF,EAASC,IAAI,qBAAGd,KAC5B,OAAoC,IAA7BK,IAAEW,IAAID,EAAKb,GAAOe,Q,wEAGjB,IAAD,SACqBC,KAAKjB,MAAzBY,EADD,EACCA,SAAUX,EADX,EACWA,MACZU,EAAcM,KAAKN,cACzB,OACE,6BACE,uBAAGO,UAAU,YACT,2BAAOC,KAAK,WACVjB,SAAU,gBAAakB,EAAb,EAAGC,OAAUD,QAAb,OAA6B,EAAKV,UAAUU,IACtDA,QAAST,IAHf,2BAKUV,EAAMe,OALhB,sBAQEJ,EAASC,IAAI,SAACS,GAAD,OACX,yBAAKJ,UAAU,iBAAiBK,IAAKD,EAAKvB,IACxC,2BAAOmB,UAAU,aAAaC,KAAK,WAAWC,QAASnB,EAAMI,SAASiB,EAAKvB,IAAMG,SAAU,kBAAM,EAAKJ,cAAcwB,EAAKvB,OACzH,yBAAKyB,IAAKF,EAAKG,MACf,2BAAIH,EAAKI,c,GA1CKC,aAmD5B9B,EAAc+B,aAAe,CAC3BhB,SAAU,GACVX,MAAO,IASMJ,QC/DTe,G,MAAW,CACf,CACEb,GAAI,IACJ2B,KAAM,MACND,IAAK,yFAEP,CACE1B,GAAI,IACJ2B,KAAM,MACND,IAAK,yFAEP,CACE1B,GAAI,IACJ2B,KAAM,MACND,IAAK,2FAaMI,MATf,WAAgB,IAAD,EACeC,IAAMC,SAAS,CAAC,MAD/B,mBACL9B,EADK,KACE+B,EADF,KAEb,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,CAAeN,SAAUA,EAAUX,MAAOA,EAAOC,SAAU,SAACD,GAAD,OAAW+B,EAAS/B,QCdjEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.868b925d.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './pictureSelect.css';\nimport _ from 'lodash';\n\nclass PictureSelect extends Component {\n\n  onChangevalue = (id) => {\n    const { value, onChange } = this.props;\n    const isChecked = _.includes(value, id);\n    const newValue = _.cloneDeep(value);\n    if(isChecked) {\n      newValue.splice(newValue.indexOf(id), 1);\n      onChange(newValue);\n    } else {\n      onChange([...newValue, id]);\n    }\n  }\n\n  selectAll = (isSelectAll) => {\n    const { onChange, pictures } = this.props;\n    onChange(isSelectAll ? pictures.map(({ id }) => id) : [])\n  }\n\n  isSelectAll = () => {\n    const { pictures, value } = this.props;\n    const ids = pictures.map(({ id }) => id);\n    return _.xor(ids, value).length === 0;\n  }\n\n  render() {\n    const { pictures, value } = this.props;\n    const isSelectAll = this.isSelectAll();\n    return (\n      <div>\n        <p className=\"seletAll\">\n            <input type=\"checkbox\" \n              onChange={({ target: { checked } }) => this.selectAll(checked)}\n              checked={isSelectAll}\n            />\n            已经选中{ value.length }个文件\n        </p>\n        {\n          pictures.map((item) => (\n            <div className=\"pictureContent\" key={item.id}>\n              <input className=\"picChecked\" type=\"checkbox\" checked={value.includes(item.id)}  onChange={() => this.onChangevalue(item.id)} />\n              <img src={item.url} />\n              <p>{item.name}</p>\n            </div>\n          ))\n        }\n      </div>\n    )\n  }\n}\n\nPictureSelect.defaultProps = {\n  pictures: [],\n  value: [],\n}\n\nPictureSelect.propTypes = {\n  pictures: PropTypes.array.isRequired,\n  value: PropTypes.array.isRequired,\n  onChange: PropTypes.func.isRequired,\n}\n\nexport default PictureSelect;","import React from 'react';\nimport PictureSelect from './components/pictureSelect';\nimport './App.css';\n\nconst pictures = [\n  {\n    id: '1',\n    name: 'foo',\n    url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\n  },\n  {\n    id: '2',\n    name: 'foo',\n    url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\n  },\n  {\n    id: '3',\n    name: 'foo',\n    url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\n  },\n];\n\nfunction App() {\n  const [ value, setValue ] = React.useState(['1']);\n  return (\n    <div className=\"App\">\n      <PictureSelect pictures={pictures} value={value} onChange={(value) => setValue(value)} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}